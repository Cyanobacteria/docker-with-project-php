version: '3.3'
services:

  #PHP Service
  app:
    build:
      context: ./dockerfiles
      dockerfile: ${PHP_SERVICE_DOCKERFILE}
    #image: php7.3
    #image: 'bitnami/5.6.40-debian-9-r114'
    container_name: ${PREFIX}-app
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    links:
      - nginx
      - db
    depends_on:
      - db
      - nginx
    working_dir: /var/www
    volumes:
      - ../project:/var/www
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network

  #Nginx Service
  nginx:
    image: ${NGINX_SERVICE_DOCKERFILE}
    container_name: ${PREFIX}-nginx
    restart: unless-stopped
    tty: true
    ports:
      - "${NGINX_SERVICE_MAIN_PORT}:80"
      - "${NGINX_SERVICE_SSL_PORT}:443"
    volumes:
      - ../project:/var/www
      - ./config/nginx/conf.d/:/etc/nginx/conf.d/
      - ./logs/nginx/:/var/log/nginx/
    networks:
      - app-network

  #MySQL Service
  db:
    build:
      context: ./dockerfiles/mysql
      dockerfile: ${MYSQL_SERVICE_DOCKERFILE}
    #image: ${MYSQL_SERVICE_DOCKERFILE}
    container_name: ${PREFIX}-database
    restart: unless-stopped
    tty: true
    ports:
      - "${MYSQL_SERVICE_MAIN_PORT}:3306"
    expose:
      - "3309"
    environment:
      MYSQL_DATABASE: test
      MYSQL_ROOT_PASSWORD: test
      MYSQL_USER: test
      MYSQL_PASSWORD: test
      #MYSQL_ROOT_HOST: localhost
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - databasedata:/var/lib/mysql
      - ./config/mysql/my.cnf:/etc/my.cnf
      - ./logs/mysql:/var/log/mysql
    entrypoint: ""
    command: 
      bash -c "exec /entrypoint.sh mysqld"
      --character-set-server=utf8
      --default_authentication_plugin=mysql_native_password
    networks:
      - app-network
  phpmyadmin:
    depends_on:
      - db
    image: phpmyadmin/phpmyadmin
    restart: always
    ports:
      - '8080:80'
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: test
    networks:
    - app-network

#Docker Networks
networks:
  app-network:
    driver: bridge

#Volumes
volumes:
  databasedata:
    driver: local

